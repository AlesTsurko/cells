{"version":3,"sources":["App.js","serviceWorker.js","index.js","images/languages.jpg"],"names":["Cells","className","Download","useState","selectedOption","setSelectedOption","options","setOptions","currentRelease","setCurrentRelease","handleResponse","resp","opts","assets","map","asset","value","browser_download_url","label","name","useEffect","a","async","fetch","ok","json","res","fetchData","then","document","getElementById","click","Fragment","onChange","placeholder","isSearchable","id","href","download","style","display","Copyright","Date","getFullYear","currentYear","App","title","width","height","src","frameBorder","allow","allowFullScreen","backgroundImage","languages","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"oRA2DA,SAASA,IACL,OACI,yBAAKC,UAAU,SACX,6BACI,yBAAKA,UAAU,YAEnB,6BACI,yBAAKA,UAAU,YAEnB,6BACI,yBAAKA,UAAU,aAM/B,SAASC,IAAY,IAAD,EAC8BC,qBAD9B,mBACRC,EADQ,KACQC,EADR,OAEgBF,mBAAS,IAFzB,mBAERG,EAFQ,KAECC,EAFD,OAG8BJ,mBAAS,IAHvC,mBAGRK,EAHQ,KAGQC,EAHR,KAoBhB,SAASC,EAAeC,GACpB,GAAIA,EAAM,CACNF,EAAkBE,GAElB,IAAMC,EAAOD,EAAKE,OAAOC,KAAI,SAACC,GAAD,MAAY,CACrCC,MAAOD,EAAME,qBACbC,MAAOH,EAAMI,SAGjBZ,EAAWK,IAanB,OArCAQ,qBAAU,YACN,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACuBE,MACf,kEAFR,YACUZ,EADV,QAKaa,GALb,kCAAAH,EAAA,MAM0BV,EAAKc,QAN/B,cAMcC,EANd,yBAOeA,GAPf,sCAWAC,GAAYC,KAAKlB,KAClB,IAeHU,qBACI,WACQhB,GACAyB,SAASC,eAAe,iBAAiBC,UAGjD,CAAE3B,IAIF,kBAAC,IAAM4B,SAAP,KACI,kBAAC,IAAD,CACI/B,UAAU,WACVgC,SAAU5B,EACVC,QAASA,EACT4B,YAAa1B,EAAeW,KAC5BgB,cAAc,IAEjB/B,GACG,uBACIgC,GAAG,gBACHC,KAAMjC,EAAeY,MACrBsB,UAAQ,EACRC,MAAO,CAAEC,QAAS,SAJtB,aAahB,SAASC,IAAa,IAAD,EACOtC,oBAAS,IAAIuC,MAAOC,eAApCC,EADS,oBAGjB,OACI,yBAAK3C,UAAU,aAAf,YACgB2C,EAAc,KAAd,WAAyBA,GAAgB,KADzD,iBAOOC,MAhJf,WACI,OACI,yBAAK5C,UAAU,QACX,kBAACD,EAAD,MACA,yBAAKC,UAAU,WACX,yBAAKA,UAAU,sBACX,qCACA,wDAGJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,6BACX,4BACI6C,MAAM,cACNC,MAAM,MACNC,OAAO,MACPC,IAAI,4CACJC,YAAY,IACZC,MAAM,gEACNC,iBAAe,KAIvB,yBAAKnD,UAAU,uBACX,yBAAKA,UAAU,yBACX,qJAKA,kBAACC,EAAD,SAKZ,yBAAKD,UAAU,sBACX,yBAAKA,UAAU,uBACX,yBACIsC,MAAO,CACHc,gBAAgB,QAAD,OAAUC,IAAV,MACfP,MAAO,IACPC,OAAQ,UAM5B,kBAACP,EAAD,QC1CQc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShC,SAASC,eAAe,SD6H3C,kBAAmBgC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,wC","file":"static/js/main.749321da.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Select from 'react-select';\n\nimport './app.scss';\nimport languages from './images/languages.jpg';\n\nfunction App() {\n    return (\n        <div className=\"main\">\n            <Cells />\n            <div className=\"content\">\n                <div className=\"content-row header\">\n                    <h1>Cells</h1>\n                    <h5>Live Coding Environment</h5>\n                </div>\n\n                <div className=\"content-row middle\">\n                    <div className=\"content-description video\">\n                        <iframe\n                            title=\"cells-video\"\n                            width=\"570\"\n                            height=\"323\"\n                            src=\"https://www.youtube.com/embed/S0QfVc6bMhg\"\n                            frameBorder=\"0\"\n                            allow=\"accelerometer; encrypted-media; gyroscope; picture-in-picture\"\n                            allowFullScreen\n                        />\n                    </div>\n\n                    <div className=\"content-description\">\n                        <div className=\"description-container\">\n                            <h5>\n                                Cells allows you to organize code into runnable\n                                snippets and mix different programming languages\n                                in the same project.\n                            </h5>\n                            <Download />\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"content-row bottom\">\n                    <div className=\"content-description\">\n                        <div\n                            style={{\n                                backgroundImage: `url(\"${languages}\")`,\n                                width: 383,\n                                height: 186\n                            }}\n                        />\n                    </div>\n                </div>\n            </div>\n            <Copyright />\n        </div>\n    );\n}\n\nfunction Cells() {\n    return (\n        <div className=\"cells\">\n            <div>\n                <div className=\"cell-1\" />\n            </div>\n            <div>\n                <div className=\"cell-2\" />\n            </div>\n            <div>\n                <div className=\"cell-3\" />\n            </div>\n        </div>\n    );\n}\n\nfunction Download() {\n    const [ selectedOption, setSelectedOption ] = useState();\n    const [ options, setOptions ] = useState([]);\n    const [ currentRelease, setCurrentRelease ] = useState('');\n\n    useEffect(() => {\n        async function fetchData() {\n            const resp = await fetch(\n                'https://api.github.com/repos/AlesTsurko/cells/releases/latest'\n            );\n\n            if (resp.ok) {\n                const res = await resp.json();\n                return res;\n            }\n        }\n\n        fetchData().then(handleResponse);\n    }, []);\n\n    function handleResponse(resp) {\n        if (resp) {\n            setCurrentRelease(resp);\n\n            const opts = resp.assets.map((asset) => ({\n                value: asset.browser_download_url,\n                label: asset.name\n            }));\n\n            setOptions(opts);\n        }\n    }\n\n    useEffect(\n        () => {\n            if (selectedOption) {\n                document.getElementById('download-link').click();\n            }\n        },\n        [ selectedOption ]\n    );\n\n    return (\n        <React.Fragment>\n            <Select\n                className=\"download\"\n                onChange={setSelectedOption}\n                options={options}\n                placeholder={currentRelease.name}\n                isSearchable={false}\n            />\n            {selectedOption && (\n                <a\n                    id=\"download-link\"\n                    href={selectedOption.value}\n                    download\n                    style={{ display: 'none' }}\n                >\n                    Download\n                </a>\n            )}\n        </React.Fragment>\n    );\n}\n\nfunction Copyright() {\n    const [ currentYear ] = useState(new Date().getFullYear());\n\n    return (\n        <div className=\"copyright\">\n            &copy; 2019{currentYear > 2019 ? `-${currentYear}` : null}, Ales\n            Tsurko\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/languages.cfca819d.jpg\";"],"sourceRoot":""}